{"kind":"FETCH","data":{"headers":{"cache-control":"no-store, must-revalidate","connection":"keep-alive","content-encoding":"gzip","content-type":"text/html; charset=utf-8","date":"Mon, 06 Jan 2025 15:53:50 GMT","keep-alive":"timeout=5","link":"</_next/static/media/a34f9d1faa5f3315-s.p.woff2>; rel=preload; as=\"font\"; crossorigin=\"\"; type=\"font/woff2\"","transfer-encoding":"chunked","vary":"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch, Accept-Encoding","x-powered-by":"Next.js"},"body":"","status":200,"url":"http://127.0.0.1:3000/api"},"revalidate":50,"tags":[]}